const { faker } = require('@faker-js/faker');
const User = require('../models/user.model.js');
const genders = require('../enums/genders.js');
const roles = require('../enums/roles.js');

const seedStudents = async () => {
  const students = [
    {
      _id: '67841d19f5aeb9ddf6aa71a1',
      firstName: 'First',
      lastName: 'Student',
      email: 'student1@example.com',
      password: 'Student123!',
      gender: faker.helpers.arrayElement(genders),
      dateOfBirth: faker.date.birthdate(),
      placeOfBirth: faker.location.city(),
      citizenship: faker.location.country(),
      pinOIB: faker.string.numeric(11),
      idCardNumber: faker.string.numeric(9),
      address: faker.location.streetAddress(),
      contactNumber: faker.phone.number(),
      semester: faker.number.int({ min: 1, max: 6 }),
      yearOfStudy: faker.number.int({ min: 1, max: 5 }),
      role: 'student',
      studyProgrammeId: '67842f7f320c478f3ed8da4d',
    },
    {
      _id: '67841d19f5aeb9ddf6aa71a2',
      firstName: 'Second',
      lastName: 'Student',
      email: 'student2@example.com',
      password: 'Student123!',
      gender: faker.helpers.arrayElement(genders),
      dateOfBirth: faker.date.birthdate(),
      placeOfBirth: faker.location.city(),
      citizenship: faker.location.country(),
      pinOIB: faker.string.numeric(11),
      idCardNumber: faker.string.numeric(9),
      address: faker.location.streetAddress(),
      contactNumber: faker.phone.number(),
      semester: faker.number.int({ min: 1, max: 6 }),
      yearOfStudy: faker.number.int({ min: 1, max: 5 }),
      role: 'student',
      studyProgrammeId: '67842f8e320c478f3ed8da5a',
    },
    {
      _id: '67841d19f5aeb9ddf6aa71a3',
      firstName: 'Third',
      lastName: 'Student',
      email: 'student3@example.com',
      password: 'Student123!',
      gender: faker.helpers.arrayElement(genders),
      dateOfBirth: faker.date.birthdate(),
      placeOfBirth: faker.location.city(),
      citizenship: faker.location.country(),
      pinOIB: faker.string.numeric(11),
      idCardNumber: faker.string.numeric(9),
      address: faker.location.streetAddress(),
      contactNumber: faker.phone.number(),
      semester: faker.number.int({ min: 1, max: 6 }),
      yearOfStudy: faker.number.int({ min: 1, max: 5 }),
      role: 'student',
      studyProgrammeId: '67842fc1320c478f3ed8da67',
    },
    {
      _id: '67841d1af5aeb9ddf6aa71a4',
      firstName: 'Fourth',
      lastName: 'Student',
      email: 'student4@example.com',
      password: 'Student123!',
      gender: faker.helpers.arrayElement(genders),
      dateOfBirth: faker.date.birthdate(),
      placeOfBirth: faker.location.city(),
      citizenship: faker.location.country(),
      pinOIB: faker.string.numeric(11),
      idCardNumber: faker.string.numeric(9),
      address: faker.location.streetAddress(),
      contactNumber: faker.phone.number(),
      semester: faker.number.int({ min: 1, max: 6 }),
      yearOfStudy: faker.number.int({ min: 1, max: 5 }),
      role: 'student',
      studyProgrammeId: '678430b0320c478f3ed8dab0',
    },
    {
      _id: '67841d1af5aeb9ddf6aa71a5',
      firstName: 'Fifth',
      lastName: 'Student',
      email: 'student5@example.com',
      password: 'Student123!',
      gender: faker.helpers.arrayElement(genders),
      dateOfBirth: faker.date.birthdate(),
      placeOfBirth: faker.location.city(),
      citizenship: faker.location.country(),
      pinOIB: faker.string.numeric(11),
      idCardNumber: faker.string.numeric(9),
      address: faker.location.streetAddress(),
      contactNumber: faker.phone.number(),
      semester: faker.number.int({ min: 1, max: 6 }),
      yearOfStudy: faker.number.int({ min: 1, max: 5 }),
      role: 'student',
      studyProgrammeId: '678430c4320c478f3ed8dabd',
    },
    {
      _id: '67841d1af5aeb9ddf6aa71a6',
      firstName: 'Sixth',
      lastName: 'Student',
      email: 'student6@example.com',
      password: 'Student123!',
      gender: faker.helpers.arrayElement(genders),
      dateOfBirth: faker.date.birthdate(),
      placeOfBirth: faker.location.city(),
      citizenship: faker.location.country(),
      pinOIB: faker.string.numeric(11),
      idCardNumber: faker.string.numeric(9),
      address: faker.location.streetAddress(),
      contactNumber: faker.phone.number(),
      semester: faker.number.int({ min: 1, max: 6 }),
      yearOfStudy: faker.number.int({ min: 1, max: 5 }),
      role: 'student',
      studyProgrammeId: '678438f6d1d382e83012bab4',
    },
    {
      _id: '67841d1af5aeb9ddf6aa71a7',
      firstName: 'Seventh',
      lastName: 'Student',
      email: 'student7@example.com',
      password: 'Student123!',
      gender: faker.helpers.arrayElement(genders),
      dateOfBirth: faker.date.birthdate(),
      placeOfBirth: faker.location.city(),
      citizenship: faker.location.country(),
      pinOIB: faker.string.numeric(11),
      idCardNumber: faker.string.numeric(9),
      address: faker.location.streetAddress(),
      contactNumber: faker.phone.number(),
      semester: faker.number.int({ min: 1, max: 6 }),
      yearOfStudy: faker.number.int({ min: 1, max: 5 }),
      role: 'student',
      studyProgrammeId: '6784392bd1d382e83012bac1',
    },
    {
      _id: '67841d1af5aeb9ddf6aa71a8',
      firstName: 'Eighth',
      lastName: 'Student',
      email: 'student8@example.com',
      password: 'Student123!',
      gender: faker.helpers.arrayElement(genders),
      dateOfBirth: faker.date.birthdate(),
      placeOfBirth: faker.location.city(),
      citizenship: faker.location.country(),
      pinOIB: faker.string.numeric(11),
      idCardNumber: faker.string.numeric(9),
      address: faker.location.streetAddress(),
      contactNumber: faker.phone.number(),
      semester: faker.number.int({ min: 1, max: 6 }),
      yearOfStudy: faker.number.int({ min: 1, max: 5 }),
      role: 'student',
      studyProgrammeId: '67843a25d1d382e83012bace',
    },
    {
      _id: '67841d1af5aeb9ddf6aa71a9',
      firstName: 'Ninth',
      lastName: 'Student',
      email: 'student9@example.com',
      password: 'Student123!',
      gender: faker.helpers.arrayElement(genders),
      dateOfBirth: faker.date.birthdate(),
      placeOfBirth: faker.location.city(),
      citizenship: faker.location.country(),
      pinOIB: faker.string.numeric(11),
      idCardNumber: faker.string.numeric(9),
      address: faker.location.streetAddress(),
      contactNumber: faker.phone.number(),
      semester: faker.number.int({ min: 1, max: 6 }),
      yearOfStudy: faker.number.int({ min: 1, max: 5 }),
      role: 'student',
      studyProgrammeId: '67843a3ad1d382e83012badb',
    },
  ];

  try {
    // Save each user individually to trigger pre-save middleware
    for (const userData of students) {
      const user = new User(userData);
      await user.save();
    }

    console.log('Student users seeded successfully');
  } catch (err) {
    console.error('Error seeding student users:', err);
  }
};

module.exports = seedStudents;
